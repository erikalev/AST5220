module rec_mod
  use healpix_types
  use params
  use time_mod
  use ode_solver
  use spline_1D_mod
  implicit none

  integer(i4b),                        private :: n                 ! Number of grid points
  real(dp), allocatable, dimension(:), private :: x_rec             ! Grid
  real(dp), allocatable, dimension(:), private :: tau, tau2, tau22, log_tau, d2_tau  ! Splined tau and second derivatives
  real(dp), allocatable, dimension(:), private :: n_e, n_e2, log_ne ! Splined (log of) electron density, n_e
  real(dp), allocatable, dimension(:), private :: g, g2, g22, dg_dx      ! Splined visibility function

contains

  subroutine initialize_rec_mod
    implicit none

    integer(i4b) :: i, j, k
    real(dp)     :: saha_limit, T_b, n_b, dx, f, n_e0, X_e0, xstart, xstop, constant, pi, hmin, eps, yp1 
    real(dp)     :: ypn, log_value, test, step
    logical(lgt) :: use_saha
    real(dp), dimension(1) :: y
    real(dp), allocatable, dimension(:) :: X_e, a_rec ! Fractional electron density, n_e / n_H
    real(dp) :: lambda_21, lambda_a, Cr, beta, alpha2, n1s, beta2, phi2, H, der
    saha_limit = 0.99d0       ! Switch from Saha to Peebles when X_e < 0.99
    xstart     = log(1.d-10)  ! Start grids at a = 10^-10
    xstop      = 0.d0         ! Stop  grids at a = 1
    n          = 1000         ! Number of grid points between xstart and xstopo

    allocate(x_rec(n))
    allocate(X_e(n))
    allocate(tau(n))
    allocate(tau2(n))
    allocate(tau22(n))
    allocate(d2_tau(n))
    allocate(log_tau(n))
    allocate(n_e(n))
    allocate(n_e2(n))
    allocate(log_ne(n))
    allocate(g(n))
    allocate(g2(n))
    allocate(g22(n))
    allocate(dg_dx(n))
    allocate(a_rec(n))

    ! variables for odeint
    eps = 1.d-10
    hmin = 0.d0

    ! variables for spline
    yp1 = 1.d30
    ypn = 1.d30

    ! Task: Fill in x (rec) grid
    dx = (xstop-xstart)/(n-1)
    x_rec(1) = xstart
    !write(*,*) xstop
    do i=1, (n-1)
       x_rec(i+1) = x_rec(i) + dx
    end do

    !write(*,*) x_rec(n)
    !step = abs(1.d-3*(x_rec(1) - x_rec(2)))
    
    ! Task: Compute X_e and n_e at all grid times
    use_saha = .true.
    do i = 1, n
       n_b = Omega_b0*rho_c0/(m_H*exp(3.d0*x_rec(i)))

       if (use_saha) then
          ! Use the Saha equation
          T_b = T_0/exp(x_rec(i))
          constant = (m_e*k_b*T_b/(2.d0*pi*hbar**2.d0))**1.5d0*exp(-epsilon_0/(k_b*T_b))/n_b
          X_e(i) = (-constant + sqrt(constant**2 + 4.d0*constant))/2.d0

          if (X_e(i) < saha_limit) use_saha = .false.
            
       else
          X_e(i) = X_e(i-1)    
          call odeint(X_e(i:i), x_rec(i-1), x_rec(i), eps, step, hmin, dXe_dx, bsstep, output)
       end if
       n_e(i) = X_e(i)*n_b
       log_value = log(n_e(i))
       log_ne(i) = log_value
    end do

    ! Task: Compute splined (log of) electron density function
    call spline (x_rec, log_ne, yp1, ypn, n_e2) 

    ! Task: Compute optical depth at all grid points
    tau(n) = 0.d0
    log_value = -30.d0
    log_tau(n) = log_value
    do i = n-1, 1, -1
        tau(i) = tau(i+1)
        call odeint(tau(i:i), x_rec(i+1) ,x_rec(i), eps ,step, hmin, dtau_dx, bsstep, output)
        log_value = log(tau(i))
        log_tau(i) = log_value
    end do

    ! Task: Compute splined (log of) optical depth
    call spline(x_rec, log_tau, yp1, ypn, tau2)
    ! Task: Compute splined second derivative of (log of) optical depth
    call spline(x_rec, tau2, yp1, ypn, tau22)

    ! Task: Compute splined visibility function
    do i=1, n
        test = -get_dtau(x_rec(i))*exp(-get_tau(x_rec(i)))!n_e(i)*sigma_T*c/get_H(x_rec(i))*exp(-tau(i))
        g(i) = test
    end do
    
    call spline(x_rec, g, yp1, ypn, g2)
    ! Task: Compute splined second derivative of visibility function
    call spline(x_rec,g2,yp1,ypn,g22)

    !do i=1, n
    !    dg_dx(i) = get_dg(x_rec(i))
    !end do
    ! write to file
    open(50, file = "data.dat")
    do i=1,n
       write(50,'(8(E17.8E3))') x_rec(i), X_e(i), tau(i), get_dtau(x_rec(i)), get_ddtau(x_rec(i)), g(i), get_dg(x_rec(i)),&
       get_ddg(x_rec(i))
    end do
    close(50)


  end subroutine initialize_rec_mod

  subroutine dXe_dx(x, X_e, deriv)
    use healpix_types
    implicit none
    real(dp),               intent(in)  :: x
    real(dp), dimension(:), intent(in)  :: X_e
    real(dp), dimension(:), intent(out) :: deriv
    real(dp) :: lambda_21, lambda_a, Cr, beta, alpha2, n1s, beta2, phi2, H, n_b, T_b
    T_b = T_0/exp(x)                            
    n_b = Omega_b0*rho_c0/(m_H*exp(3.d0*x))
    H = get_H(x)
    n1s = n_b*(1.d0 - X_e(1))                 ! [m-3]44
    phi2 = 0.448d0*log(epsilon_0/(k_b*T_b))
    lambda_a = H*(3.d0*epsilon_0)**3.d0/((8.d0*pi)**2.d0*n1s*(c*hbar)**3.d0)   ! [s-1]
    
    alpha2 = 64.d0*pi / sqrt(27.d0*pi) * (alpha/m_e)**2.d0 * sqrt(epsilon_0/(k_b*T_b)) * phi2 * hbar**2/c
    beta = alpha2 * (m_e*k_b*T_b / (2.d0*pi*hbar**2.d0))**1.5d0 * exp(-epsilon_0/(k_b*T_b))

    ! combined the betas to avoid infinities    
    beta2 = alpha2 * (m_e*k_b*T_b / (2.d0*pi*hbar**2.d0))**1.5d0 * exp((-epsilon_0)/(4.d0*k_b*T_b))

    Cr = (lambda_21 + lambda_a)/(lambda_21 + lambda_a + beta2) 
    deriv = Cr/H*(beta*(1.d0 - X_e) - n_b*alpha2*X_e**2.d0)
  end subroutine dXe_dx

  function get_n_e(x)
    implicit none

    real(dp), intent(in) :: x
    real(dp)             :: get_n_e
    get_n_e = exp(splint(x_rec, log_ne, n_e2, x))
  end function get_n_e

  ! Task: Complete routine for computing the derivative of tau at arbitrary x, using precomputed information
  subroutine dtau_dx(x,tau, deriv)
    use healpix_types
    implicit none
    real(dp),               intent(in)  :: x
    real(dp), dimension(:), intent(in)  :: tau
    real(dp), dimension(:), intent(out) :: deriv

    deriv = -get_n_e(x)*sigma_T*exp(x)*c/get_H_p(x)
  end subroutine dtau_dx

  function get_tau(x)
      implicit none
      real(dp), intent(in) :: x
      real(dp)             :: get_tau
      get_tau  = splint(x_rec, tau, tau2, x)
  end function get_tau

  function get_dtau(x)
    implicit none

    real(dp), intent(in) :: x
    real(dp)             :: get_dtau
    get_dtau = splint_deriv(x_rec, log_tau, tau2, x)
    get_dtau = get_dtau*get_tau(x) 
 end function get_dtau

  function get_ddtau(x)
    implicit none

    real(dp), intent(in) :: x
    real(dp)             :: get_ddtau
    get_ddtau = splint(x_rec, tau2, tau22, x)
    get_ddtau = get_ddtau*get_tau(x) + get_dtau(x)**2/get_tau(x)  
  end function get_ddtau

  function get_g(x)
    implicit none

    real(dp), intent(in) :: x
    real(dp)             :: get_g
    get_g = splint(x_rec, g, g2, x)
  end function get_g

  ! Task: Complete routine for computing the derivative of the visibility function, g, at arbitray x
  function get_dg(x)
    implicit none

    real(dp), intent(in) :: x
    real(dp)             :: get_dg
    get_dg = splint_deriv(x_rec, g, g2, x)
  end function get_dg

  ! Task: Complete routine for computing the second derivative of the visibility function, g, at arbitray x
  function get_ddg(x)
    implicit none

    real(dp), intent(in) :: x
    real(dp)             :: get_ddg
    get_ddg = splint(x_rec, g2, g22, x)
  end function get_ddg

end module rec_mod


module rec_mod
  use healpix_types
  use params
  use time_mod
  use ode_solver
  use spline_1D_mod
  implicit none

  integer(i4b)                        :: n                 ! Number of grid points
  real(dp), allocatable, dimension(:) :: x_rec             ! Grid
  real(dp), allocatable, dimension(:) :: X_e               ! Fractional electron density, n_e / n_H
  real(dp), allocatable, dimension(:) :: tau, tau2, tau22  ! tau, tau'', (tau'')''
  real(dp), allocatable, dimension(:) :: dtau              ! First derivative of tau: tau'
  real(dp), allocatable, dimension(:) :: n_e, n_e2         ! Splined (log of) electron density, n_e
  real(dp), allocatable, dimension(:) :: g, g2, g22        ! Visibility: g, g'',(g'')''
  real(dp), allocatable, dimension(:) :: dg                ! First derivative of g: g'
  real(dp)                            :: yp1, ypn, eps, hmin
contains

  subroutine initialize_rec_mod
    implicit none

    integer(i4b) :: i, j, k
    real(dp)     :: saha_limit, y, T_b, n_b, dydx, xmin, xmax, dx
    real(dp)     :: f, n_e0, X_e0, xstart, xstop, step, a
    real(dp)     :: C_r

    logical(lgt) :: use_saha

    saha_limit = 0.99d0       ! Switch from Saha to Peebles when X_e < 0.99
    xstart     = log(1.d-10)  ! Start grids at a = 10^-10
    xstop      = 0.d0         ! Stop  grids at a = 1
    n          = 1000         ! Number of grid points between xstart and xstopo

    ! Spline variables
    yp1 = 1.d30
    ypn = 1.d30

    ! Integration variables
    eps = 1.d-10
    hmin = 0.d0


    ! Allocating arrays
    allocate(x_rec(n))
    allocate(X_e(n))
    allocate(tau(n))
    allocate(dtau(n))
    allocate(tau2(n))
    allocate(tau22(n))
    allocate(n_e(n))
    allocate(n_e2(n))
    allocate(g(n))
    allocate(dg(n))
    allocate(g2(n))
    allocate(g22(n))

    !---------------------- Time-grid ----------------------

    ! Uniform x-grid with 1000 points from a = 10^-10 to 1
    dx = (xstop-xstart)/(n-1)
    x_rec(1) = xstart
    do i=2,n
      x_rec(i) = x_rec(i-1) + dx
    end do

    step = abs(1.d-3*(x_rec(1)-x_rec(2))) ! Step length for ODE

    !---------------------- X_e calculation ----------------------

    ! Compute X_e and n_e at all grid times
    use_saha = .true.
    do i = 1, n
       a = exp(x_rec(i))
       n_b = Omega_b0*rho_c0/(m_H*a**3)
       if (use_saha) then
         ! Use the Saha equation
          T_b = T_0/a
          X_e0= ((m_e*k_b*T_b)/(2.d0*pi*hbar**2))**1.5*exp(-epsilon_0/(k_b*T_b))/n_b
          X_e(i) = (-X_e0 + sqrt(X_e0**2 +4.d0*X_e0))/2.d0
      if (X_e(i) < saha_limit) use_saha = .false.
      else
          ! Use the Peebles equation
          X_e(i) = X_e(i-1)
          call odeint(X_e(i:i), x_rec(i-1), x_rec(i), eps, step, hmin, dX_edx, bsstep, output)
       end if
       n_e(i) = X_e(i)*n_b ! Electron density
    end do

    ! write to file
    open(50, file = "data.dat")
    do i=1,n
       write(50,'(2(E17.8E3))') x_rec(i), X_e(i)!, tau(i), get_dtau(x_rec(i)), get_ddtau(x_rec(i)), g(i), get_dg(x_rec(i)),&
       !get_ddg(x_rec(i))
    end do
    close(50)

  end subroutine initialize_rec_mod

  ! ---------------------- Saha equation for integration ----------------------
  subroutine dX_edx(x, X_e, dydx)
        use healpix_types
        implicit none
        real(dp),               intent(in)  :: x
        real(dp), dimension(:), intent(in)  :: X_e
        real(dp), dimension(:), intent(out) :: dydx
        real(dp) :: a, T_b,n_b,phi2,alpha2,beta,beta2,n1s,lambda_alpha,C_r,H
        a = exp(x)
        H      = get_H(x)
        T_b    = T_0/a
        n_b    = Omega_b0*rho_c0/(m_H*a**3)
        phi2   = 0.448d0*log(epsilon_0/(k_b*T_b))
        alpha2 = 64.d0*pi/sqrt(27.d0*pi)*(alpha/m_e)**2*sqrt(epsilon_0/(k_b*T_b))*phi2*hbar**2/c
        beta   = alpha2 *((m_e*k_b*T_b)/(2.d0*pi*hbar**2))**1.5*exp(-epsilon_0/(k_b*T_b))

        ! To avoid beta2 going to infinity, set it to 0
        !if(T_b <= 169.d0) then
        !    beta2    = 0.d0
        !else
        !    beta2    = beta*exp((3.d0*epsilon_0)/(4.d0*k_b*T_b))
        !end if
        beta2 = alpha2 * (m_e*k_b*T_b / (2.d0*pi*hbar**2.d0))**1.5d0 * exp((-epsilon_0)/(4.d0*k_b*T_b))
        n1s          = (1.d0-X_e(1))*n_b
        lambda_alpha = H*(3.d0*epsilon_0)**3/((8.d0*pi)**2*n1s) /(c*hbar)**3
        C_r          = (lambda_21 +lambda_alpha)/(lambda_21+lambda_alpha+beta2)
        dydx         = C_r/H*(beta*(1.d0-X_e(1)) - n_b*alpha2*X_e(1)**2)

    end subroutine dX_edx

    !---------------------- Optical thickness for ODE ----------------------
    subroutine dtaudx(x,tau, dydx)
        use healpix_types
        implicit none
        real(dp),               intent(in)  :: x
        real(dp), dimension(:), intent(in)  :: tau
        real(dp), dimension(:), intent(out) :: dydx
        real(dp)                            :: n_e
        real(dp)                            :: H

        dydx = -get_n_e(x)*sigma_T*exp(x)*c/get_H_p(x)
    end subroutine dtaudx

  !---------------------- Functions for generalization ----------------------
  ! Complete routine for computing n_e at arbitrary x, using precomputed information
  function get_n_e(x_in)
      implicit none
      real(dp), intent(in) :: x_in
      real(dp)             :: get_n_e
      !Spline integration with precalculated logarithmic values
      ! TODO: Should n_e be log'ed?
      get_n_e = exp(splint(x_rec, n_e, n_e2, x_in))
  end function get_n_e

  !  Complete routine for computing tau at arbitrary x, using precomputed information
  function get_tau(x)
    implicit none

    real(dp), intent(in) :: x
    real(dp)             :: get_tau

    get_tau = splint(x_rec,tau,tau2,x)
  end function get_tau

  function get_dtau(x)
       implicit none
       real(dp), intent(in) :: x
       real(dp)             :: get_dtau
       real(dp)             :: n_e,H_p
       !H_p = get_H_p(x)
       !n_e = get_n_e(x)
       !get_dtau = -n_e*sigma_T*exp(x)*c/H_p
       get_dtau =  splint_deriv(x_rec, tau, tau2, x)
   end function get_dtau

  ! : Complete routine for computing the second derivative of tau at arbitrary x,
  ! using precomputed information
  function get_ddtau(x)
    implicit none

    real(dp), intent(in) :: x
    real(dp)             :: get_ddtau
    get_ddtau = splint(x_rec,tau2, tau22, x)
  end function get_ddtau

  !  Complete routine for computing the visibility function, g, at arbitray x
  function get_g(x)
    implicit none

    real(dp), intent(in) :: x
    real(dp)             :: get_g
    get_g = splint(x_rec, g, g2, x)
  end function get_g

  !  Complete routine for computing the derivative of the visibility function, g, at arbitray x
  function get_dg(x)
    implicit none

    real(dp), intent(in) :: x
    real(dp)             :: get_dg
    get_dg = splint_deriv(x_rec,g,g2,x)
  end function get_dg

  !  Complete routine for computing the second derivative of the visibility function, g, at arbitray x
  function get_ddg(x)
    implicit none

    real(dp), intent(in) :: x
    real(dp)             :: get_ddg
    get_ddg = splint(x_rec,g2,g22,x)
  end function get_ddg


end module rec_mod
